                                                // from takeYouForwalrd yt channel
                                       // ques1--row and column are given we have to print element at that place
int nCr(int n, int r) {
long long res = 1;
forint
i = O;iâ€¹r;i++) {
res = res * (n - i); // 10*9*8
res = res / (1 + 1);// 1*2*3
}
return res;

}



                                                 ques 2 ..   // print any nth row of Pascal triangle
                                         #M1 - call nCr funtion in a loop to print whole row

#M2 - public class tUf {
    public static List<Integer> generateRow(int row) {
        long ans = 1;
        List<Integer> ansRow = new ArrayList<>();
        ansRow.add(1); //inserting the 1st element

        //calculate the rest of the elements:
        for (int col = 1; col < row; col++) {
            ans = ans * (row - col);
            ans = ans / col;
            ansRow.add((int)ans);
        }
        return ansRow;
    }

                                            ques 3..... // print whole pattern
                             M1...

import java.util.*;

public class tUf {
    public static int nCr(int n, int r) {
        long res = 1;
        // calculating nCr:
        for (int i = 0; i < r; i++) {
            res = res * (n - i);
            res = res / (i + 1);
        }
        return (int) res;
    }

    public static List<List<Integer>> pascalTriangle(int n) {
        List<List<Integer>> ans = new ArrayList<>();

        // Store the entire Pascal's triangle:
        for (int row = 1; row <= n; row++) {
            List<Integer> tempLst = new ArrayList<>(); // temporary list
            for (int col = 1; col <= row; col++) {
                tempLst.add(nCr(row - 1, col - 1));
            }
            ans.add(tempLst);
        }
        return ans;
    }

    public static void main(String[] args) {
        int n = 5;
        List<List<Integer>> ans = pascalTriangle(n);
        for (List<Integer> it : ans) {
            for (int ele : it) {
                System.out.print(ele + " ");
            }
            System.out.println();
        }
    }
}








                                           use m2 to print all row.....




import java.util.ArrayList;
import java.util.List;

public class revison {
    
    // Function to generate a single row of Pascal's Triangle
    public static List<Integer> generateRow(int row) {
        List<Integer> ansRow = new ArrayList<>();
        long ans = 1;

        // The first element in the row is always 1
        ansRow.add(1);

        // Calculate the rest of the elements in the row
        for (int col = 1; col <= row; col++) {
            // Calculate the next element based on the previous one
            ans = ans * (row - col + 1) / col;
            ansRow.add((int) ans); // Cast to int and add to the row
        }

        return ansRow;
    }

    // Function to print the entire Pascal's Triangle up to a certain number of rows
    public static void printPascalsTriangle(int numRows) {
        for (int row = 0; row < numRows; row++) {
            // Generate each row
            List<Integer> rowValues = generateRow(row);

           

            for (int val : rowValues) {
                System.out.print(val + " ");
            }
            System.out.println(); // Newline after each row
        }
    }

    public static void main(String[] args) {
        // Specify how many rows of Pascal's Triangle you want to print
        int numRows = 6;
        
        // Print Pascal's Triangle
        printPascalsTriangle(numRows);
    }
}

