// one test case not pass with m1

import java.util.Arrays;
import java.util.Scanner;

public class day15conversionSB_DB {
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }
        int target = sc.nextInt();
        triplet(arr,target);
        }
        
            private static void triplet(int[] arr, int target) {
                Arrays.sort(arr); 
       for ( int i = 0; i < arr.length; i++) {
        for (int j = 0; j < arr.length; j++) {
            for (int j2 = 0; j2 < arr.length; j2++) {
                if (arr[i]+arr[j]+arr[j2] == target || arr[j]+arr[j2]+arr[i]==target||arr[j2]+arr[i]+arr[j]==target) {
                    if(arr[i]<arr[j]&&arr[j]<arr[j2]){
                        
                    System.out.println(arr[i] + ", "+ arr[j] +" and "+arr[j2]) ;
                }
            }
            
        }
    }
       }
    }
}
    


 ........................ M2
Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();  // Read the size of the array
        int[] arr = new int[n];
        
        // Read the array elements
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }
        
        int target = sc.nextInt();  // Read the target sum
        findTriplets(arr, target);
    }

    private static void findTriplets(int[] arr, int target) {
        Arrays.sort(arr);  // Sort the array to simplify finding triplets
        int n = arr.length;
        
        // Array to store unique triplets
        int[][] triplets = new int[n * n][3];
        int count = 0;  // Counter to keep track of the number of unique triplets
        
        // Loop to fix the first element of the triplet
        for (int i = 0; i < n - 2; i++) {
            // Skip duplicate elements for the first element of the triplet
            if (i > 0 && arr[i] == arr[i - 1]) {
                continue;
            }

            int left = i + 1;
            int right = n - 1;

            // Two-pointer approach to find pairs that sum to target - arr[i]
            while (left < right) {
                int sum = arr[i] + arr[left] + arr[right];
                
                if (sum == target) {
                    // Found a valid triplet, store it in the triplet array
                    triplets[count][0] = arr[i];
                    triplets[count][1] = arr[left];
                    triplets[count][2] = arr[right];
                    count++;  // Increment the count
                    
                    // Move both pointers and skip duplicates
                    left++;
                    right--;
                    
                    // Skip duplicates for the second element (left pointer)
                    while (left < right && arr[left] == arr[left - 1]) left++;
                    // Skip duplicates for the third element (right pointer)
                    while (left < right && arr[right] == arr[right + 1]) right--;
                } else if (sum < target) {
                    left++;  // Increase the sum by moving the left pointer
                } else {
                    right--;  // Decrease the sum by moving the right pointer
                }
            }
        }

        // Print the unique triplets stored in the triplet array
        if (count == 0) {
            System.out.println("No triplets found");
        } else {
            // Sort the triplet array by the first element, then second, and finally third element
            Arrays.sort(triplets, 0, count, (a, b) -> {
                if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
                if (a[1] != b[1]) return Integer.compare(a[1], b[1]);
                return Integer.compare(a[2], b[2]);
            });

            // Print the triplets in the required format
            for (int i = 0; i < count; i++) {
                System.out.println(triplets[i][0] + ", " + triplets[i][1] + " and " + triplets[i][2]);
            }
        }
